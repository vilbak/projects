{"version":3,"sources":["views/Counter/index.js","containers/CounterContainer.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","react_default","a","createElement","className","Typography","variant","count","Button","color","onClick","incrementCounter","decrementCounter","resetCounter","CounterContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","number","state","setState","views_Counter","React","Component","App","containers_CounterContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAwBeA,EAlBD,SAACC,GACX,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYC,QAAU,KAAKF,UAAY,eAAvC,IAAuDJ,EAAMO,OAC7DN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQF,QAAS,YAAYG,MAAQ,UAAWC,QAAWV,EAAMW,kBAAjE,aACGV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQF,QAAU,YAAYG,MAAQ,UAAUC,QAAWV,EAAMY,kBAAjE,aACAX,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQF,QAAU,YAAYG,MAAO,UAAUC,QAAWV,EAAMa,cAAhE,WC6COC,cAnDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMJP,iBAAmB,WACf,IAAMW,EAASP,EAAKQ,MAAMhB,MAC1BQ,EAAKS,SAAS,CACVjB,MAAOe,EAAS,KAVVP,EAedH,iBAAmB,WACf,IAAMU,EAASP,EAAKQ,MAAMhB,MAC1BQ,EAAKS,SAAS,CACVjB,MAAOe,EAAS,KAlBVP,EAwBdF,aAAe,WAEXE,EAAKS,SAAS,CACVjB,MAAO,KAzBXQ,EAAKQ,MAAQ,CACThB,MAAO,GAHDQ,wEAiCV,OAAOd,EAAAC,EAAAC,cAACsB,EAAD,CAASlB,MACZW,KAAKK,MAAMhB,MAEfI,iBACIO,KAAKP,iBAETC,iBACIM,KAAKN,iBAETC,aACIK,KAAKL,sBA7Cca,IAAMC,WCIrBC,mLAHX,OAAQ3B,EAAAC,EAAAC,cAAC0B,EAAD,aAFMH,IAAMC,WCSLG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d718129.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nlet Counter = (props) =>{\r\n    return (\r\n     <div className=\"container\">\r\n     <Typography variant = \"h1\" className = \"counterText\"> {props.count}</Typography>\r\n     <Button variant =\"contained\" color = \"default\"  onClick ={ props.incrementCounter} >Increment</Button>\r\n        <Button variant = \"contained\" color = \"default\" onClick = {props.decrementCounter}>Decrement</Button>\r\n        <Button variant = \"contained\" color =\"default\" onClick = {props.resetCounter}>Reset</Button>\r\n\r\n     </div>\r\n\r\n    )\r\n}\r\nCounter.propTypes = {\r\n   count: PropTypes.number,\r\n   incrementCounter: PropTypes.func,\r\n   decrementCounter: PropTypes.func,\r\n   resetCounter: PropTypes.func\r\n};\r\nexport default Counter;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Counter from '../views/Counter/';\r\n\r\nclass CounterContainer extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    incrementCounter = () => {\r\n        const number = this.state.count;\r\n        this.setState({\r\n            count: number + 1\r\n        });\r\n\r\n    }\r\n\r\n    decrementCounter = () => {\r\n        const number = this.state.count;\r\n        this.setState({\r\n            count: number - 1\r\n        })\r\n\r\n\r\n    }\r\n\r\n    resetCounter = () => {\r\n\r\n        this.setState({\r\n            count: 0\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return <Counter count = {\r\n            this.state.count\r\n        }\r\n        incrementCounter = {\r\n            this.incrementCounter\r\n        }\r\n        decrementCounter = {\r\n            this.decrementCounter\r\n        }\r\n        resetCounter = {\r\n            this.resetCounter\r\n\r\n        }\r\n        />\r\n\r\n    }\r\n}\r\n\r\nexport default CounterContainer;","import React from 'react';\n import CounterContainer from './containers/CounterContainer';\n\n class App extends React.Component{\n   render (){\n     return (<CounterContainer/>)\n   }\n }\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}